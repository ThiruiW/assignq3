Multiserver <- read.csv("C:/Users/wtts0/Downloads/Multiserver.R", header=FALSE, comment.char="#")
View(Multiserver)
Multiserver <- function(Arrivals, ServiceTimes, NumServers = 1) {
if (any(Arrivals <= 0 | ServiceTimes <= 0) || NumServers <= 0){
stop("Arrivals, ServiceTimes must be positive & NumServers must be positive" )
}
if (length(Arrivals) != length(ServiceTimes)){
stop("Arrivals and ServiceTimes must have the same length")
}
NumCust <- length(Arrivals)
AvailableFrom <- rep(0, NumServers)
ChosenServer <- ServiceBegins <- ServiceEnds <- rep(0, NumCust)
for (i in seq_along(Arrivals)) {
avail <-  min(AvailableFrom)
ChosenServer[i] <- which.min(AvailableFrom)
ServiceBegins[i] <- max(avail, Arrivals[i])
ServiceEnds[i] <- ServiceBegins[i] + ServiceTimes[i]
AvailableFrom[ChosenServer[i]] <- ServiceEnds[i]
}
out <- tibble(Arrivals, ServiceBegins, ChosenServer, ServiceEnds)
return(out)
}
save(my_data, file = "data/my_data.rda")
library(readr)
bank <- read_csv("C:/Users/wtts0/Desktop/prb set 2/Problem set 2/bank.csv")
View(bank)
Multiserver <- function(Arrivals, ServiceTimes, NumServers = 1) {
if (any(Arrivals <= 0 | ServiceTimes <= 0) || NumServers <= 0){
stop("Arrivals, ServiceTimes must be positive & NumServers must be positive" )
}
if (length(Arrivals) != length(ServiceTimes)){
stop("Arrivals and ServiceTimes must have the same length")
}
NumCust <- length(Arrivals)
AvailableFrom <- rep(0, NumServers)
ChosenServer <- ServiceBegins <- ServiceEnds <- rep(0, NumCust)
for (i in seq_along(Arrivals)) {
avail <-  min(AvailableFrom)
ChosenServer[i] <- which.min(AvailableFrom)
ServiceBegins[i] <- max(avail, Arrivals[i])
ServiceEnds[i] <- ServiceBegins[i] + ServiceTimes[i]
AvailableFrom[ChosenServer[i]] <- ServiceEnds[i]
}
out <- tibble(Arrivals, ServiceBegins, ChosenServer, ServiceEnds)
return(out)
}
usethis::use_data(bank, overwrite = TRUE)
devtools::document()
install.packages("devtools")
library(devtools)
devtools::document()
usethis::use_data_raw("bank", open = FALSE)
# Load the bank dataset
bank <- read.csv("data/bank.csv", header = TRUE)
# Save the prepared dataset into the package's data folder
usethis::use_data(bank, overwrite = TRUE)
source("data-raw/bank.R")
usethis::use_testthat()
devtools::test()
Multiserver <- function(Arrivals, ServiceTimes, NumServers = 1) {
if (any(Arrivals <= 0 | ServiceTimes <= 0) || NumServers <= 0) {
stop("Arrivals, ServiceTimes, and NumServers must be positive.")
}
if (length(Arrivals) != length(ServiceTimes)) {
stop("Arrivals and ServiceTimes must have the same length.")
}
NumCust <- length(Arrivals)
AvailableFrom <- rep(0, NumServers)
ChosenServer <- ServiceBegins <- ServiceEnds <- rep(0, NumCust)
for (i in seq_along(Arrivals)) {
avail <- min(AvailableFrom)
ChosenServer[i] <- which.min(AvailableFrom)
ServiceBegins[i] <- max(avail, Arrivals[i])
ServiceEnds[i] <- ServiceBegins[i] + ServiceTimes[i]
AvailableFrom[ChosenServer[i]] <- ServiceEnds[i]
}
out <- tibble::tibble(Arrivals, ServiceBegins, ChosenServer, ServiceEnds)
return(out)
}
#'
#' @param Arrivals A numeric vector of customer arrival times.
#' @param ServiceTimes A numeric vector of customer service times.
#' @param NumServers An integer specifying the number of servers available (default is 1).
#' @return A tibble containing the arrival times, start times, end times, and chosen server for each customer.
#' @examples
#' Arrivals <- c(1, 3, 5)
#' ServiceTimes <- c(2, 1, 3)
#' Multiserver(Arrivals, ServiceTimes, NumServers = 2)
#' @export
Multiserver <- function(Arrivals, ServiceTimes, NumServers = 1) {
if (any(Arrivals <= 0 | ServiceTimes <= 0) || NumServers <= 0) {
stop("Arrivals, ServiceTimes, and NumServers must be positive.")
}
if (length(Arrivals) != length(ServiceTimes)) {
stop("Arrivals and ServiceTimes must have the same length.")
}
NumCust <- length(Arrivals)
AvailableFrom <- rep(0, NumServers)
ChosenServer <- ServiceBegins <- ServiceEnds <- rep(0, NumCust)
for (i in seq_along(Arrivals)) {
avail <- min(AvailableFrom)
ChosenServer[i] <- which.min(AvailableFrom)
ServiceBegins[i] <- max(avail, Arrivals[i])
ServiceEnds[i] <- ServiceBegins[i] + ServiceTimes[i]
AvailableFrom[ChosenServer[i]] <- ServiceEnds[i]
}
out <- tibble::tibble(Arrivals, ServiceBegins, ChosenServer, ServiceEnds)
return(out)
}
library(tibble)
devtools::test()
install.packages("tibble")
library(tibble)
install.packages("tibble")
?bank
??bank
git init
git config --global commit.gpgSign false
git config commit.gpgSign false
usethis::use_git()
usethis::create_github_token()
git status
git add .
